/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => StudierPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");
var import_obsidian8 = require("obsidian");
var import_obsidian9 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  questionInit: "> [!info]- Questions",
  questionEnd: ">---",
  startChar: "> - ",
  correctChar: ".x"
};
var StudierSettings = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    var { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Questions intializer").setDesc(`The character(s) used to identify where the questions begin. Default: "${DEFAULT_SETTINGS["questionInit"]}"`).addText((text) => text.setValue(this.plugin.settings.questionInit).onChange(async (value) => {
      this.plugin.settings.questionInit = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Questions ender").setDesc(`The character(s) used to identify the delimiter for reading the questions. Default: "${DEFAULT_SETTINGS["questionEnd"]}"`).addText((text) => text.setValue(this.plugin.settings.questionEnd).onChange(async (value) => {
      this.plugin.settings.questionEnd = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Starter question indicator").setDesc(`The character(s) used to identify where the question begins. Default: "${DEFAULT_SETTINGS["startChar"]}"`).addText((text) => text.setValue(this.plugin.settings.startChar).onChange(async (value) => {
      this.plugin.settings.startChar = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Correct answer indicator").setDesc(`The character(s) used to identify the correct answer. Default: "${DEFAULT_SETTINGS["correctChar"]}"`).addText((text) => text.setValue(this.plugin.settings.correctChar).onChange(async (value) => {
      this.plugin.settings.correctChar = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Donations" });
    containerEl.createEl("span", {
      text: "\u{1F4B0}You can support by donating "
    }).createEl("a", {
      href: "https://liberapay.com/Cuatroy2/donate",
      text: "here"
    });
    containerEl.createEl("span", {
      text: " or contributing to the plugin. As well, you can check out more content on "
    }).createEl("a", {
      href: "https://medium.com/@cuatroy2",
      text: "Medium"
    });
    containerEl.createEl("span", {
      text: " and "
    }).createEl("a", {
      href: "https://github.com/alvaro-cas",
      text: "Github"
    });
    containerEl.createEl("span", {
      text: ". Enjoy!"
    });
    const liberapay = this.containerEl.createDiv("liberapay");
    liberapay.createEl("a", {
      href: "https://liberapay.com/Cuatroy2/donate"
    }).createEl("img", {
      attr: {
        src: "https://img.shields.io/badge/Liberapay-F6C915?style=for-the-badge&logo=liberapay&logoColor=black"
      }
    });
  }
};

// src/modals/questionnaire.ts
var import_obsidian5 = require("obsidian");
var import_obsidian6 = require("obsidian");

// src/modals/checker.ts
var import_obsidian3 = require("obsidian");
var import_obsidian4 = require("obsidian");
var Checker = class extends import_obsidian3.Modal {
  constructor(app, checked, title) {
    super(app);
    this.checked = checked;
    this.title = title;
  }
  onOpen() {
    var { contentEl } = this;
    contentEl.createEl(
      "h2",
      {
        text: "Checking for " + this.title,
        cls: "h2-modal"
      }
    );
    for (var i = 0; i < this.checked.length; i++) {
      contentEl.createEl(
        "div",
        {
          text: `${i + 1}. ` + this.checked[i][1],
          cls: "div-question-modal"
        }
      );
      if (this.checked[i][0] == "incorrect") {
        contentEl.createEl(
          "div",
          {
            text: "> " + this.checked[i][3],
            cls: "div-incorrect-modal"
          }
        );
      }
      contentEl.createEl(
        "div",
        {
          text: "> " + this.checked[i][2],
          cls: "div-correct-modal"
        }
      );
    }
    contentEl.createEl("div", { text: " ", cls: "spacer" });
    new import_obsidian4.Setting(contentEl).addButton((btn) => btn.setButtonText("Done").setCta().onClick(() => {
      this.close();
    }));
  }
  onClose() {
    var { contentEl } = this;
    contentEl.empty();
  }
};

// src/modals/questionnaire.ts
var selectedAnswers = ["0"];
var Questionnaire = class extends import_obsidian5.Modal {
  constructor(app, settings, questions, answers, title) {
    super(app);
    this.settings = settings;
    this.questions = questions;
    this.answers = answers;
    this.title = title;
  }
  onOpen() {
    var { contentEl } = this;
    contentEl.createEl(
      "h2",
      {
        text: "Questions for " + this.title,
        cls: "h2-modal"
      }
    );
    for (var i = 0; i < this.questions.length; i++) {
      new import_obsidian6.Setting(contentEl).setName(this.questions[i][0]).addDropdown((dropdown) => {
        this.questions[i][1].forEach(function(value) {
          dropdown.addOption(value + i.toString(), value);
        });
        dropdown.setValue().onChange(async (value) => {
          var needPush = true;
          selectedAnswers.forEach(function(selected) {
            if (selected.slice(-1) == value.slice(-1)) {
              selectedAnswers[value.slice(-1)] = value;
              needPush = false;
            }
          });
          needPush ? selectedAnswers.push(value) : "";
        });
      });
    }
    new import_obsidian6.Setting(contentEl).addButton((btn) => btn.setButtonText("Check!").setCta().onClick(() => {
      this.checkAnswers();
      this.close();
    }));
  }
  onClose() {
    var { contentEl } = this;
    contentEl.empty();
    selectedAnswers = [];
  }
  checkAnswers() {
    var checked = [];
    for (var i = 0; i < selectedAnswers.length; i++) {
      const slicer = selectedAnswers[i].slice(-1);
      const selected = selectedAnswers[i].slice(0, -1);
      if (this.answers[slicer] == selected) {
        checked.push([
          "correct",
          this.questions[i][0],
          this.answers[slicer],
          selected
        ]);
      } else {
        checked.push([
          "incorrect",
          this.questions[i][0],
          this.answers[slicer],
          selected
        ]);
      }
    }
    new Checker(this.app, checked, this.title).open();
  }
};

// main.ts
var StudierPlugin = class extends import_obsidian7.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("graduation-cap", "Studier", () => {
      this.openRandomStudy(false);
    });
    this.addCommand({
      id: "open-studier",
      name: "Open random note.",
      callback: () => {
        this.openRandomStudy(false);
      }
    });
    this.addCommand({
      id: "open-studier-1",
      name: "Open current note.",
      callback: () => {
        this.openRandomStudy(true);
      }
    });
    this.addSettingTab(new StudierSettings(this.app, this));
  }
  onunload() {
    console.log("Unloading plugin");
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async openRandomStudy(openCurrent) {
    var markdownFiles = this.app.vault.getMarkdownFiles();
    markdownFiles = markdownFiles.filter((file) => file.extension === "md");
    if (!markdownFiles.length) {
      new import_obsidian8.Notice("No markdown files available!");
      return;
    }
    var fileName = "";
    if (!openCurrent) {
      const randomMarkdown = markdownFiles.length * Math.random();
      const markdownOpen = markdownFiles[randomMarkdown << 0];
      fileName = markdownOpen.basename;
      await this.app.workspace.openLinkText(fileName, "");
    }
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian9.MarkdownView);
    fileName = activeView.file.basename;
    var content = "";
    if (activeView) {
      const editor = activeView.editor;
      content = editor.getValue();
    } else {
      new import_obsidian8.Notice("Error no markdown is active!");
      return;
    }
    var questionInit = this.settings.questionInit.replace(/[<>*()?\[\]]/g, "\\$&");
    var questionEnd = this.settings.questionEnd.replace(/[<>*()?\[\]]/g, "\\$&");
    const regex = new RegExp(`${questionInit}(.*?)${questionEnd}`, "sg");
    const matcherContent = content.match(regex);
    var questions = [];
    var answers = [];
    var numberQuestions = -1;
    if (!matcherContent) {
      new import_obsidian8.Notice("No questions were found for this review.");
      return;
    }
    for (var i = 0; i < matcherContent.length; i++) {
      content = matcherContent[i].split("\n");
      content.shift();
      content.pop();
      for (var a = 0; a < content.length; a++) {
        if (content[a].startsWith(this.settings.startChar)) {
          var options = content[a].split(this.settings.startChar)[1];
          var getLastChar = options.substr(options.length - this.settings.correctChar.length);
          if (getLastChar == this.settings.correctChar) {
            const regexS = new RegExp(`${this.settings.correctChar}$`);
            options = options.replace(regexS, "");
            answers[numberQuestions] = options;
            if (answers.includes(void 0)) {
              new import_obsidian8.Notice("Some questions are missing a correct answer indicator or format is incorrect.");
              return;
            }
          }
          questions[numberQuestions][1].push(options);
        } else {
          if (content[a].length <= 2) {
            console.log("Questions need to be longer than 2 characters.");
          } else {
            questions.push([content[a], []]);
            numberQuestions += 1;
          }
        }
      }
    }
    new Questionnaire(
      this.app,
      this.settings,
      questions,
      answers,
      fileName
    ).open();
  }
};


/* nosourcemap */